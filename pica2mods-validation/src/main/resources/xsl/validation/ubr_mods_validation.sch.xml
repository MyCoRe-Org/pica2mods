<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt3"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:map="http://www.w3.org/2005/xpath-functions/map">
  <title>
    MODS-Validierung für UB Rostock
  </title>
  <!-- extends unterstützt anscheinend keine hierarchische Vererbung, 
       Mehrfachvererbung -->
  <ns prefix='mods' uri='http://www.loc.gov/mods/v3' />
  <ns prefix='f' uri='http://www.mycore.org/functions/validation/mods-ubr' />

  <xsl:function name="f:validate-urn" as="xs:boolean">
    <!-- Algorithmus: https://web.archive.org/web/20200214004623/http://www.persistent-identifier.de/?link=316 -->
    <xsl:param name="urn" as="xs:string" />
    
    <xsl:variable name="charmap"
      select="map{'0': 1, '1': 2, '2': 3, '3': 4, '4': 5, '5': 6, '6': 7, '7': 8, '8': 9, '9':41,
                  'A':18, 'B':14, 'C':19, 'D':15, 'E':16, 'F':21, 'G':22, 'H':23, 'I':24, 'J':25,
                  'K':42, 'L':26, 'M':27, 'N':13, 'O':28, 'P':29, 'Q':31, 'R':12, 'S':32, 'T':33,
                  'U':11, 'V':34, 'W':35, 'X':36, 'Y':37, 'Z':38, 
                  '+':49, '.':47, ':':17, '-':39, '_':43, '/':45}" />
    
    <!-- Zunächst wird der URN-String in eine Ziffernfolge konvertiert, bei der jedem Element der URN ein Zahlenwert zugewiesen wird. 
         Die entsprechenden Ziffern gehen aus der Konkordanztabelle hervor. -->
    <xsl:variable name="values" as="xs:integer*">
      <xsl:for-each select="1 to string-length($urn)-1">
       <xsl:sequence select="map:get($charmap, upper-case(substring($urn, ., 1))) "/>
      </xsl:for-each>    
    </xsl:variable>
    <xsl:variable name="ziffernfolge" select="string-join($values)" />
    
    <!-- Jede Zahl der Ziffernfolge wird einzeln von links nach rechts aufsteigend, beginnend mit 1 multipliziert,
         anschließend wird die Summe gebildet.  -->
    <xsl:variable name="products" as="xs:integer*">
      <xsl:for-each select="1 to string-length($ziffernfolge)">
        <xsl:sequence select="xs:integer(. * number(substring($ziffernfolge, ., 1)))"/>
      </xsl:for-each>    
    </xsl:variable>
    <!-- Diese Produktsumme wird durch die letzte Zahl der URN-Ziffernfolge dividiert. -->
    <xsl:variable name="quotient" select="sum($products) div number(substring($ziffernfolge, string-length($ziffernfolge), 1))"/>
    <!-- Die letzte Zahl vor dem Komma des Quotienten ist die Prüfziffer. -->
    <xsl:variable name="pruefziffer" select="floor($quotient) mod 10" />
    
    <!-- Das Ergebnis ist der Vergleich der berechnete Prüfziffer mit der letzten Stelle der Ausgangs-URN -->
    <xsl:sequence select="$pruefziffer = number(substring($urn, string-length($urn), 1))" />
  </xsl:function>
  
  <pattern>
    <let name="doctype"
      value="substring-before(substring-after(//mods:*[@displayLabel='doctype']/@valueURI, '#'),'.')" />

    <rule id="mods_global" abstract="true">
      <assert test="count(mods:recordInfo/mods:recordIdentifier)=1">
        Das Dokument muss GENAU EINEN RecordIdentifier haben.
      </assert>
      <assert test="mods:identifier[@type='purl']">
        Das Dokument muss eine PURL haben.
      </assert>
      <assert test="ends-with(mods:identifier[@type='purl'], mods:recordInfo/mods:recordIdentifier)">
        Der RecordIdentifier muss Bestandteil der PURL sein.
      </assert>
      <assert test="count(mods:titleInfo[@usage='primary']/mods:title)=1">
        Das Dokument muss GENAU EIN &lt;title&gt; unterhalb &lt;titleInfo usage='primary'&gt; haben.
      </assert>
      <assert test="count(mods:originInfo[@eventType='publication']/mods:dateIssued[@keyDate='yes'])=1">
        Das Dokument muss GENAU EIN &lt;originInfo @eventType='publication'&gt; / &lt;dateIssued @keyDate='yes'&gt; haben.
      </assert>
      <assert test="count(mods:originInfo[@eventType='publication']/mods:dateIssued[not(@*)])=1">
        Das Dokument muss GENAU EIN &lt;originInfo @evenType='publication'&gt; / &lt;dateIssued&gt; (ohne Attribut) haben.
      </assert>

      <!-- ToDo-Check that the value is a valid classification item -->
      <assert test="count(mods:*[@displayLabel='doctype'][ends-with(@authorityURI, '/doctype')])=1">
        Das Dokument muss GENAU EINE doctype-Klassifikation haben.
      </assert>
      <assert test="count(mods:classification[ends-with(@authorityURI, '/accesscondition')])=1">
        Das Dokument muss GENAU EINE accesscondition-Klassifikation haben.
      </assert>
      <assert test="count(mods:classification[contains(@valueURI, '/licenseinfo#work')])=1">
        Das Dokument muss GENAU EINE licenseinfo#work-Klassifikation haben.
      </assert>
      <assert test="count(mods:classification[contains(@valueURI, '/licenseinfo#metadata')])=1">
        Das Dokument muss GENAU EINE licenseinfo#metadata-Klassifikation haben.
      </assert>
    </rule>
    <!-- <rule context="//mods:mods[contains(string(mods:classification/@valueURI),'doctype#histbest')]"> funktioniert nicht, 
      da nicht alle XPath-Ausdrücke erlaubt sind. Nur XSLT-Pattern sind erlaubt: https://www.w3.org/TR/xslt20/#patterns -->


    <rule id="mods_epub" abstract="true">
      <assert test="mods:identifier[@type='doi']">
        Das Dokument muss eine DOI haben.
      </assert>
      <assert
        test="contains(mods:identifier[@type='doi'], translate(mods:recordInfo/mods:recordIdentifier, '/','_'))">
        Der RecordIdentifier muss Bestandteil der DOI sein.
      </assert>
    </rule>

    <rule context="mods:mods[$doctype='epub']">
      <extends rule="mods_global" />
      <extends rule="mods_epub" />
    </rule>
    <rule context="mods:mods[$doctype='data']">
    <extends rule="mods_global" />
      <extends rule="mods_epub" />
    </rule>
    <rule context="mods:mods">
      <!-- fallback, default: doctype=histbest -->
      <extends rule="mods_global" />
    </rule>
    
    <rule context="mods:mods/mods:relatedItem[@type='host'][not(./mods:recordInfo/mods:recordIdentifier)]">
       <assert test="count(mods:titleInfo)=1">
        Das &lt;relatedItem type='host'&gt; muss GENAU EIN &lt;titleInfo&gt; haben.
       </assert>
       <report
        test="not(mods:part/mods:detail/mods:number|mods:part/mods:detail/mods:title)">
        Das &lt;relatedItem type='host'&gt; muss ein &lt;part&gt; / &lt;detail&gt; / &lt;number&gt; oder &lt;title&gt; haben.
      </report>
    </rule>
    <rule context="mods:mods/mods:relatedItem[@type='series'][not(./mods:recordInfo/mods:recordIdentifier)]">
       <assert test="count(mods:titleInfo)=1">
        Das &lt;relatedItem type='series'&gt; muss GENAU EIN &lt;titleInfo&gt; haben.
      </assert>
    </rule>
    <rule context="mods:mods/mods:relatedItem[@type='host'][./mods:recordInfo/mods:recordIdentifier]">
      <assert test="count(mods:titleInfo)=1">
        Das &lt;relatedItem type='host'&gt; muss GENAU EIN &lt;titleInfo&gt; haben.
      </assert>
      <report
        test="not(mods:part/mods:detail/mods:number|mods:part/mods:detail/mods:title)">
        Das &lt;relatedItem type='host'&gt; muss ein &lt;part&gt; / &lt;detail&gt; / &lt;number&gt; oder &lt;title&gt; haben.
      </report>
      <assert test="count(mods:part/mods:text[@type='sortstring'])">
        Das &lt;relatedItem type='host'&gt; muss GENAU EIN &lt;part&gt; / &lt;text type='sortstring'&gt; haben.
      </assert>
    </rule>
    <rule context="mods:mods/mods:relatedItem[@type='series'][./mods:recordInfo/mods:recordIdentifier]">
      <assert test="count(mods:titleInfo)=1">
        Das &lt;relatedItem type='series'&gt; muss GENAU EIN &lt;titleInfo&gt; haben.
      </assert>
      <assert test="count(mods:part/mods:text[@type='sortstring'])">
        Das &lt;relatedItem type='series'&gt; muss GENAU EIN &lt;part&gt; / &lt;text type='sortstring'&gt; haben.
      </assert>
    </rule>
    
    <rule context="mods:mods/mods:identifier[@type='urn']">
      <assert test="f:validate-urn(.)">
        Die Prüfziffer der URN <value-of select="." /> ist ungültig.
      </assert>
    </rule>

  </pattern>
</schema>